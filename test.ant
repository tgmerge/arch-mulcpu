////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2003 Xilinx, Inc.
// All Right Reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 10.1
//  \   \         Application : ISE
//  /   /         Filename : test.ant
// /___/   /\     Timestamp : Wed Mar  5 19:19:23 2014
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: 
//Design Name: test
//Device: Xilinx
//
`timescale 1ns/1ps

module test;
    reg clk = 1'b0;
    reg rst = 1'b0;
    reg [31:0] ir_data = 32'b00000000001000100001100000100000;
    reg zero = 1'b0;
    wire write_pc;
    wire iord;
    wire write_mem;
    wire write_dr;
    wire write_ir;
    wire memtoreg;
    wire regdst;
    wire [1:0] pcsource;
    wire write_c;
    wire [1:0] alu_ctrl;
    wire alu_srcA;
    wire [1:0] alu_srcB;
    wire write_a;
    wire write_b;
    wire write_reg;
    wire [3:0] state;
    wire [3:0] insn_type;
    wire [3:0] insn_code;
    wire [2:0] insn_stage;

    parameter PERIOD = 40;
    parameter real DUTY_CYCLE = 0.5;
    parameter OFFSET = 0;

    initial    // Clock process for clk
    begin
        #OFFSET;
        forever
        begin
            clk = 1'b0;
            #(PERIOD-(PERIOD*DUTY_CYCLE)) clk = 1'b1;
            #(PERIOD*DUTY_CYCLE);
        end
    end

    ctrl UUT (
        .clk(clk),
        .rst(rst),
        .ir_data(ir_data),
        .zero(zero),
        .write_pc(write_pc),
        .iord(iord),
        .write_mem(write_mem),
        .write_dr(write_dr),
        .write_ir(write_ir),
        .memtoreg(memtoreg),
        .regdst(regdst),
        .pcsource(pcsource),
        .write_c(write_c),
        .alu_ctrl(alu_ctrl),
        .alu_srcA(alu_srcA),
        .alu_srcB(alu_srcB),
        .write_a(write_a),
        .write_b(write_b),
        .write_reg(write_reg),
        .state(state),
        .insn_type(insn_type),
        .insn_code(insn_code),
        .insn_stage(insn_stage));

    integer TX_FILE = 0;
    integer TX_ERROR = 0;
    
    initial begin    // Annotation process for clock clk
        #0;
        ANNOTATE_write_pc;
        ANNOTATE_iord;
        ANNOTATE_write_mem;
        ANNOTATE_write_dr;
        ANNOTATE_write_ir;
        ANNOTATE_memtoreg;
        ANNOTATE_regdst;
        ANNOTATE_pcsource;
        ANNOTATE_write_c;
        ANNOTATE_alu_ctrl;
        ANNOTATE_alu_srcA;
        ANNOTATE_alu_srcB;
        ANNOTATE_write_a;
        ANNOTATE_write_b;
        ANNOTATE_write_reg;
        ANNOTATE_state;
        ANNOTATE_insn_type;
        ANNOTATE_insn_code;
        ANNOTATE_insn_stage;
        #OFFSET;
        forever begin
            #35;
            ANNOTATE_write_pc;
            ANNOTATE_iord;
            ANNOTATE_write_mem;
            ANNOTATE_write_dr;
            ANNOTATE_write_ir;
            ANNOTATE_memtoreg;
            ANNOTATE_regdst;
            ANNOTATE_pcsource;
            ANNOTATE_write_c;
            ANNOTATE_alu_ctrl;
            ANNOTATE_alu_srcA;
            ANNOTATE_alu_srcB;
            ANNOTATE_write_a;
            ANNOTATE_write_b;
            ANNOTATE_write_reg;
            ANNOTATE_state;
            ANNOTATE_insn_type;
            ANNOTATE_insn_code;
            ANNOTATE_insn_stage;
            #5;
        end
    end

    initial begin  // Open the annotations file...
        TX_FILE = $fopen("/home/scy/arch/1/mmmmmmmmmmmmcpu/test.ano");
        #1040 // Final time:  1040 ns
        $display("Success! Annotation Simulation Complete.");
        $fdisplay(TX_FILE, "Total[%d]", TX_ERROR);
        $fclose(TX_FILE);
        $finish;
    end

    initial begin
    end

    task ANNOTATE_write_pc;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,write_pc,%b]", $time, write_pc);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_iord;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,iord,%b]", $time, iord);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_write_mem;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,write_mem,%b]", $time, write_mem);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_write_dr;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,write_dr,%b]", $time, write_dr);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_write_ir;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,write_ir,%b]", $time, write_ir);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_memtoreg;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,memtoreg,%b]", $time, memtoreg);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_regdst;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,regdst,%b]", $time, regdst);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_pcsource;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,pcsource,%b]", $time, pcsource);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_write_c;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,write_c,%b]", $time, write_c);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_alu_ctrl;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,alu_ctrl,%b]", $time, alu_ctrl);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_alu_srcA;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,alu_srcA,%b]", $time, alu_srcA);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_alu_srcB;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,alu_srcB,%b]", $time, alu_srcB);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_write_a;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,write_a,%b]", $time, write_a);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_write_b;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,write_b,%b]", $time, write_b);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_write_reg;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,write_reg,%b]", $time, write_reg);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_state;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,state,%b]", $time, state);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_insn_type;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,insn_type,%b]", $time, insn_type);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_insn_code;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,insn_code,%b]", $time, insn_code);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_insn_stage;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,insn_stage,%b]", $time, insn_stage);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

endmodule

